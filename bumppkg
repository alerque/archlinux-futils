#!/bin/bash
set -e

_repo=$1

case $_repo in
  s)
    _suffix=staging
    shift
    ;;
  t)
    _suffix=testing
    shift
    ;;
  *)
    # Stable
    _suffix=
    ;;
esac

_pkgbase=$1
_pkgver=$2
_pkgrel=$3
_msg="$4"

_build=1

if [[ -z "$_pkgrel" ]]; then
  _pkgrel=1
fi

if [[ "$_pkgrel" == "0" ]]; then
  _build=0
fi

[[ -d "$_pkgbase" ]] || pkgctl repo clone "$_pkgbase"

pushd $_pkgbase/

git pull --ff-only || :

_pkgname=$(. PKGBUILD; echo $pkgname)
for _repo in core extra multilib; do
  if pacman -Sql $_repo | grep "^$_pkgname$" >/dev/null; then
    _target=$_repo
    break
  fi
done

if [[ -n "$_suffix" ]]; then
  _target=$_target-$_suffix
  _suffix=--$_suffix
fi

if [[ -z "$_target" ]]; then
  echo "Cannot find package in x86 repo."
  exit 1
fi

_oldpkgver=$(. PKGBUILD; echo $pkgver)

if [[ "$_pkgver" == "rebuild" ]]; then
  _rebuild="--rebuild"
  _msg="$3"

else

  if [[ "$_pkgver" != "head" ]]; then
    setconf PKGBUILD pkgver $_pkgver
  fi
  setconf PKGBUILD pkgrel $_pkgrel

  if grep '^_commit=' PKGBUILD >/dev/null; then
    if [[ -n "$COMMIT" ]]; then
      setconf PKGBUILD _commit $COMMIT
    else
      # Attempt to update _commit
      _oldcommit=$(. PKGBUILD; echo $_commit)
      for _source in $(. PKGBUILD; echo ${source[@]}); do
        if [[ $_source =~ git\+(https://.*)\#commit=$_oldcommit ]]; then
          _gitrepo=${BASH_REMATCH[1]}

          if [[ $_pkgver == "HEAD" ]]; then
            _commit="$(git ls-remote $_gitrepo | grep HEAD | cut -f1)"
          else
            tags="$(git ls-remote --tags $_gitrepo)"

            _guess_tag_prefix=$(echo "$tags" | grep ^$_oldcommit | sed "s|.*refs/tags/||;s|$_oldpkgver.*||" | head -n1)
            if echo "$tags" | grep refs/tags/$_guess_tag_prefix$_pkgver$ >/dev/null; then
              _newtag=$_guess_tag_prefix$_pkgver
            elif echo "$tags" | grep refs/tags/$_pkgver$ >/dev/null; then
              _newtag=$_pkgver
            elif echo "$tags" | grep refs/tags/v$_pkgver$ >/dev/null; then
              _newtag=v$_pkgver
            elif echo "$tags" | grep refs/tags/V$_pkgver$ >/dev/null; then
              _newtag=V$_pkgver
            else
              echo "Unable to find tag for $_pkgver"
              exit 1
            fi

            if echo "$tags" | grep $_newtag^{}$ >/dev/null; then
              _commit=$(echo "$tags" | grep refs/tags/$_newtag^{}$ | cut -f1)
            else
              _commit=$(echo "$tags" | grep refs/tags/$_newtag$ | cut -f1)
            fi
          fi

          setconf PKGBUILD _commit $_commit
          break
        fi
      done
    fi
  fi
fi

# Autofixes
grep -E "^sha256sums=|^sha512sums=|^b2sums=" PKGBUILD >/dev/null || \
  sed -e 's|^sha1sums=|sha256sums=|' \
      -e 's|^md5sums=|sha256sums=|' \
      -i PKGBUILD
sed -e 's|http://github.com/|https://github.com/|' \
    -e "s|arch=('i686' 'x86_64')|arch=('x86_64')|" \
    -e "s|arch=(\"i686\" \"x86_64\")|arch=('x86_64')|" \
    -i PKGBUILD
  
if [[ "$_pkgver" == "HEAD" ]]; then
  if [[ "${EUID:-$(id -u)}" -eq 0 ]]; then
    env EUID=1000 makepkg -o
  else
    makepkg -o
  fi
fi

# root workaround
if [[ "${EUID:-$(id -u)}" -eq 0 ]]; then
  env EUID=1000 updpkgsums
else
  updpkgsums
fi

git --no-pager diff

if [[ "$_build" -eq 1 ]]; then
  _buildserver=$(felixbuild-server-select)

  SYNCBACKPKGBUILD=1 felixbuild $_buildserver pkgctl build $_suffix $_rebuild

  # BUILDHOST=$_buildserver PKGBASE=$_pkgbase felix-rsync-wrapper pkgctl release $_suffix -m "$_msg"
  pkgctl release $_suffix -m "$_msg"

  while ! db-update; do
    echo "db-update failed, retrying after 5s..."
    sleep 5
  done

  cleanpkg
fi
