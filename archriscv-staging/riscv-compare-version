#!/usr/bin/ruby

require 'set'
require 'tempfile'
require 'net/http'
require 'json'
require 'pycall/import'

include PyCall::Import

pyimport :pyalpm

REPOROOT = "/var/www/archlinuxriscv"
PATCHREPO = "/var/www/archriscv-packages"

$x86_packages = Hash.new{|h,k| h[k] = {}}
$rv_packages = Hash.new{|h,k| h[k] = {}}
$pkgbase_map = Hash.new{|h,k| h[k] = Set[]}

$rv_provides = Set[]

$outdated_logs = Set[]
$version_mismatch = Set[]
$blacklist = Set[]
$broken_pkgs = Set[]

STDOUT.sync = true
puts "Running pacman -Sy..."
`pacman -Sy`

puts "Reading blacklist..."
`cd #{PATCHREPO}; git pull`
File.read(PATCHREPO + "/blacklist.txt").each_line do |pkg|
    pkg.chomp!
    next if pkg.start_with? "#" or pkg == ""
    $blacklist << pkg
end

puts "Fetching from MelonBot..."
begin
    $marks = JSON.parse(Net::HTTP.get(URI("https://plct-arv.jiejiss.com/pkg")))["markList"].map do |pkg|
        [pkg["name"], pkg ]
    end.to_h
rescue => e
    puts "Failed to fetch from MelonBot: #{e}"
    $marks = {}
end

File.open("#{REPOROOT}/.status/status.htm.tmp", 'w') do |f|
    f.puts('
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.snrat.com/ajax/libs/bulma/1.0.3/css/bulma.min.css" integrity="sha384-DtLgkgZWuBalGogBkye1PTBvXKCD/hnA8vHqpqfcGCf/FOa1heAyeHExO8JNtVM/" crossorigin="anonymous">
    <style>
    .tag.tag-with-details { height: auto; min-height: 2em; }
    </style>
    <table class="table is-hoverable">
    <thead><tr><th>DB</th><th>Package</th><th>Status</th></tr></thead><tbody>
    ')

    if $marks.empty?
        f.puts("<tr><td></td><td>_warning</td><td><span style='color:var(--bulma-danger)'>Failed to fetch from MelonBot, marks will be missing!</span></td></tr>")
    end

    def read_db(handle, db, result)
        count = 0
        db_handle = handle.register_syncdb(db, 0)
        db_handle.search("").each do |package|
            yield package

            ["depends", "makedepends", "checkdepends", "provides", "arch", "base", "version"].each do |field|
                result[package.name][field] = package.send(field)
            end
            result[package.name]["db"] = db

            count += 1
        end

        count
    end

    puts "Faking sync database..."
    Dir.mktmpdir do |dir|
        Dir.mkdir("#{dir}/sync")
        ["core", "extra"].each do |db|
            FileUtils.ln_s("#{REPOROOT}/repo/#{db}/#{db}.db", "#{dir}/sync/")
        end

        x86_handle = pyalpm.Handle.new(".", "/var/lib/pacman")
        rv_handle = pyalpm.Handle.new(".", "#{dir}")

        stat = ""
        ["core", "extra"].each do |db|
            puts "Reading x86_64 #{db}..."
            x86_count = read_db(x86_handle, db, $x86_packages) do |package|
                $pkgbase_map[package.base] << package.name
                package.provides.each do |_package|
                    $pkgbase_map[package.base] << _package.split("=")[0]
                end
            end

            puts "Reading riscv64 #{db}..."
            rv_count = read_db(rv_handle, db, $rv_packages) do |package|
                if ! File.exist?("#{REPOROOT}/repo/#{db}/#{package.filename}")
                    f.puts("<tr><td>#{db}</td><td>#{package.name}</td><td><span style='color:var(--bulma-danger)'>Lint: package file not found in repository</span></td></tr>")
                elsif ! File.exist?("#{REPOROOT}/repo/#{db}/#{package.filename}.sig")
                    f.puts("<tr><td>#{db}</td><td>#{package.name}</td><td><span style='color:var(--bulma-danger)'>Lint: package signature not found in repository</span></td></tr>")
                end

                if $rv_packages.has_key?(package.name)
                    f.puts("<tr><td>#{db}</td><td>#{package.name}</td>
                                <td><span style='color:var(--bulma-danger)'>Lint: package found in different repository: #{$rv_packages[package.name]['db']}.
                                x86 repo: #{$x86_packages[package.name]['db']}</span></td></tr>")
                end
            end

            percent = (rv_count * 100.0 / x86_count).round(2)
            stat += "[#{db}] #{rv_count} / #{x86_count} (#{percent}%)\n"
        end

        puts "Writing status.txt..."
        File.open("#{REPOROOT}/.status/status.txt.tmp", 'w') do |f|
            f.puts(stat)
        end
        File.rename("#{REPOROOT}/.status/status.txt.tmp", "#{REPOROOT}/.status/status.txt")
    end

    $rv_provides |= $rv_packages.keys.to_set

    puts "Checking version mismatch..."
    $rv_packages.each do |pkgname, package|
        rvver = package["version"]

        if rvver.split("-")[1].include? "."
            rvver = [rvver.split("-")[0], rvver.split("-")[1].split(".")[0]].join("-")
        end

        if $x86_packages.has_key?(pkgname) && $x86_packages[pkgname]["version"] != rvver
            $version_mismatch << pkgname
            package['provides'].each do |_package|
                $version_mismatch << _package.split("=")[0] if ! $x86_packages.has_key? _package.split("=")[0]
            end
        end

        package["provides"].each do |_package|
            $rv_provides << _package.split("=")[0]
        end
    end

    def x86_history_link(pkgbase)
        "https://gitlab.archlinux.org/archlinux/packaging/packages/#{pkgbase}/-/commits/main"
    end

    def patch_repo_link(pkgbase)
        if File.exist?("#{PATCHREPO}/#{pkgbase}")
            " <a href=https://github.com/felixonmars/archriscv-packages/tree/master/#{pkgbase}>
              <span class='tag is-info'>patched</span></a>"
        else
            ""
        end
    end

    def parse_build_log(log)
        cached_stage_file = File.dirname(log) + "/." + File.basename(log) + ".failed_stage"
        if File.exist?(cached_stage_file) and File.mtime(cached_stage_file) > File.mtime(log)
            return File.read(cached_stage_file).chomp
        end
        puts "Parsing build log #{log}..."
        stages = [
            ["patch failed", "\x1b[1m\x1b[32m==>\x1b[m\x0f\x1b[1m Applying RISC-V patches...\x1b[m\x0f"],
            ["source download failed", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m Failure while downloading"],
            ["checksum mismatch", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m One or more files did not pass the validity check"],
            ["gpg failed", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m One or more PGP signatures"],
            ["dependency missing", "\x1b[?25h\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m Could not resolve all dependencies"],
            ["dependency missing", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m Could not resolve all dependencies."],
            ["prepare() failed", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m A failure occurred in prepare()."],
            ["build() failed", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m A failure occurred in build()."],
            ["check() failed", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m A failure occurred in check()."],
            ["package() failed", "\x1b[1m\x1b[31m==> ERROR:\x1b[m\x0f\x1b[1m A failure occurred in package"],
            ["old config.guess", "configure: error: cannot guess build type; you must specify one"],
            ["broken rust target", "  error: Error loading target specification: Could not find specification for target \"riscv64-unknown-linux-gnu\"."],
        ]
        last_failed_stage = nil
        File.read(log).each_line do |line|
            stages.each do |stage, prefix|
                if line.start_with?(prefix)
                    last_failed_stage = stage
                    # Only check stages after the last failed stage for the following lines
                    stages.dup.each do |stage, prefix|
                        stages.delete [stage, prefix]
                        if stage == last_failed_stage
                            break
                        end
                    end
                end
            end
        end
        File.write(cached_stage_file, last_failed_stage) if last_failed_stage
        last_failed_stage
    end

    puts "Checking broken packages..."
    old_log_threshold = Time.now - 30 * 24 * 60 * 60
    $nocheck_packages = Set[]
    $x86_packages.each do |pkgname, package|
        if File.exist?("#{REPOROOT}/.status/logs/#{package['base']}")
            nochecked = false
            if $rv_packages.has_key?(pkgname)
                rvver = $rv_packages[pkgname]["version"]
                if File.exist?("#{REPOROOT}/.status/logs/#{package['base']}/.nocheck")
                    nocheckver = File.read("#{REPOROOT}/.status/logs/#{package['base']}/.nocheck").chomp
                    nochecked = nocheckver == rvver
                end

                if rvver.split("-")[1].include? "."
                    rvver = [rvver.split("-")[0], rvver.split("-")[1].split(".")[0]].join("-")
                end

                if rvver == package["version"]
                    $nocheck_packages << pkgname if nochecked
                    next
                end
            end

            if File.exist?("#{REPOROOT}/.status/logs/#{package['base']}/#{package['base']}-#{package['version']}.log")
                nil
            elsif Dir.glob("#{REPOROOT}/.status/logs/#{package['base']}/#{package['base']}-#{package['version']}-*.log").any?
                nil
            else
                $outdated_logs |= $pkgbase_map[package['base']]
                next
            end

            $broken_pkgs << pkgname
            package['provides'].each do |_package|
                $broken_pkgs << _package.split("=")[0] if ! $x86_packages.has_key? _package.split("=")[0]
            end
        end
    end

    def missing_dep(pkgbase)
        check_pkgs = Set[]
        $pkgbase_map[pkgbase].each do |pkgname|
            next if ! $x86_packages.has_key? pkgname
            package = $x86_packages[pkgname]
            check_pkgs |= (package["depends"] + package["makedepends"] + package["checkdepends"]).to_set
        end

        missing = Set[]
        broken = Set[]
        outdated = Set[]
        check_pkgs.each do |dep|
            ["<", ">", "="].each do |op|
                dep = dep.split(op)[0]
            end

            if ! $rv_provides.include?(dep) && ! $pkgbase_map[pkgbase].include?(dep)
                missing << dep
            elsif $broken_pkgs.include?(dep)
                broken << dep
            elsif $version_mismatch.include?(dep)
                outdated << dep
            end
        end
        
        return missing, broken, outdated
    end

    def make_link(list, package)
        list ? "<li><a href='##{package}'>#{package}</a></li>" : "<a href='##{package}'>#{package}</a>"
    end

    def make_tag_with_details(pkg_set, label, category)
        def get_config(pkg_set)
            # config: use_list, separator, content_before, content_after
            if pkg_set.size < 3
                return false, ', ', '', ''
            else
                return true, '', '<details><ul>', '</ul></details>'
            end
        end

        use_list, separator, content_before, content_after = get_config(pkg_set)
        " <span class='tag tag-with-details is-#{category}'>
          #{label}: #{content_before}#{pkg_set.map{|pkg| make_link(use_list, pkg)}.join(separator)}
          #{content_after}</span>"
    end
        
    def render_missing_dep(pkgbase, show_leaf=false)
        verstr = ""
        missing, broken, outdated = missing_dep(pkgbase)

        verstr += make_tag_with_details(missing, 'DEP MISSING', 'danger') if missing.any?
        verstr += make_tag_with_details(broken, 'DEP BROKEN', 'danger') if broken.any?
        verstr += make_tag_with_details(outdated, 'DEP OUTDATED', 'warning') if outdated.any?

        verstr += "Leaf package, port it!" if show_leaf and verstr.empty?
        verstr += " <a href='logs/#{pkgbase}/'><span class='tag is-text-invert'>Outdated FTBFS Logs</span></a>" if $outdated_logs.include?(pkgbase)
        verstr
    end

    def melon_mark(name)
        result = ""
        if $marks.has_key? name
            $marks[name]["marks"].map do |mark|
                title = mark["comment"] + " by " + mark["by"]["alias"]
                case mark["name"]
                when "upstreamed"
                    result += " <a href='#{mark["comment"].split[0]}'><span title='#{title}' class='tag is-success'>Upstreamed</span></a>"
                when "stuck"
                    result += " <span class='tag is-danger' title='#{title}'>Stuck</span>"
                when "ready"
                    result += " <span class='tag is-success' title='#{title}'>Ready</span>"
                when "failing"
                else
                    result += " <span class='tag is-text-invert' title='#{title}'>#{mark["name"]}</span>"
                end
            end
        end
        result
    end

    puts "Checking FTBFS logs..."
    ($broken_pkgs.sort + $nocheck_packages.sort).each do |pkgname|
        next if ! $x86_packages.has_key? pkgname
        package = $x86_packages[pkgname]
        ftbfs_link = "logs/#{package['base']}/"
        log_marks = melon_mark(package["base"]) + render_missing_dep(package["base"])
        if File.exist?("#{REPOROOT}/.status/logs/#{package['base']}/#{package['base']}-#{package['version']}.log")
            ftbfs_link = "logs/#{package['base']}/#{package['base']}-#{package['version']}.log"
            if File.mtime("#{REPOROOT}/.status/logs/#{package['base']}/#{package['base']}-#{package['version']}.log") < old_log_threshold
                log_marks += " <span class='tag is-warning'>old</span>"
            end
            failed_stage = parse_build_log("#{REPOROOT}/.status/logs/#{package['base']}/#{package['base']}-#{package['version']}.log")
            log_marks += " <span class='tag is-danger'>#{failed_stage}</span>" if failed_stage
        elsif Dir.glob("#{REPOROOT}/.status/logs/#{package['base']}/#{package['base']}-#{package['version']}-*.log").any?
            log_marks += " <span class='tag is-warning'>old format</span>"
        end

        if $nocheck_packages.include?(pkgname)
            log_marks += " <span class='tag is-pink'>nocheck</span>"
        end

        pkgname_str = pkgname
        pkgname_str += " (#{package['base']})" if pkgname != package['base']

        f.puts("<tr id='#{pkgname}'><td>#{package['db']}</td><td>#{pkgname_str}</td><td><a href='#{ftbfs_link}'>
                <span class='tag is-danger'>FTBFS</span></a>#{log_marks + patch_repo_link(package['base'])}</td></tr>")
    end

    puts "Rendering version mismatch..."
    $version_mismatch.sort.each do |pkgname|
        next if $broken_pkgs.include? pkgname
        next if ! $x86_packages.has_key? pkgname

        db = $x86_packages[pkgname]['db']
        pkgbase = $x86_packages[pkgname]['base']
        rvver = $rv_packages[pkgname]["version"]
        x86ver = $x86_packages[pkgname]['version']

        cmp = pyalpm.vercmp(rvver, x86ver)
        if cmp < 0
            rvpkgver = rvver.split("-")[0]
            x86pkgver = x86ver.split("-")[0]
            if rvpkgver == x86pkgver
                rvpkgrel = rvver.split("-")[1]
                x86pkgrel = x86ver.split("-")[1]
                verstr = "#{rvpkgver}-<span style='color:var(--bulma-success)'>#{rvpkgrel} -> </span>#{x86pkgver}-<span style='color:var(--bulma-success)'>#{x86pkgrel}</span>"
            else
                verstr = "<span style='color:var(--bulma-success)'>#{rvver} -> #{x86ver}</span>"
            end
        elsif cmp > 0
            verstr = "<span style='color:var(--bulma-warning)'>#{rvver} <- #{x86ver}</span>"
        else
            verstr = "<span style='color:var(--bulma-danger)'>#{rvver} == #{x86ver}</span>"
        end

        verstr += " <a href=#{x86_history_link(pkgbase)}><span class='tag is-info'>Changes</span></a>"

        verstr += melon_mark(pkgbase) + render_missing_dep(pkgbase)

        verstr += patch_repo_link(pkgbase)

        pkgname_str = pkgname
        pkgname_str += " (#{pkgbase})" if pkgname != pkgbase

        f.puts("<tr id='#{pkgname}'><td>#{db}</td><td>#{pkgname_str}</td><td>#{verstr}</td></tr>")
    end

    puts "Rendering missing packages..."
    $x86_packages.each do |pkgname, package|
        next if $rv_packages.include? pkgname or $broken_pkgs.include? pkgname or $blacklist.include? pkgname

        pkgname_str = pkgname
        pkgname_str += " (#{package['base']})" if pkgname != package['base']

        verstr = melon_mark(package["base"]) + render_missing_dep(package['base'], show_leaf=true)
        verstr += patch_repo_link(package['base'])
        f.puts("<tr id='#{pkgname}'><td>#{package['db']}</td><td>#{pkgname_str}</td><td>#{verstr}</td></tr>")
    end

    puts "Rendering lint..."
    $rv_packages.each do |pkgname, package|
        if ! $x86_packages.include? pkgname
            f.puts("<tr><td>#{package['db']}</td><td>#{pkgname}</td><td><span style='color:var(--bulma-warning)'>Lint: package not found in x86 repository.</span></td></tr>")
        elsif $x86_packages[pkgname]["db"] != package["db"]
            f.puts("<tr><td>#{package['db']}</td><td>#{pkgname}</td><td><span style='color:var(--bulma-danger)'>Lint: package in different x86 repository: #{$x86_packages[pkgname]['db']}.</span></td></tr>")
        end
    end

    f.puts('</tbody></table>')
end

File.rename("#{REPOROOT}/.status/status.htm.tmp", "#{REPOROOT}/.status/status.htm")

puts "Updating lastupdate.txt and latestlogs.txt..."
`cd #{REPOROOT}/; find . -name '*.tar.zst' -type f -printf "%T@ %TF %TT %p\n" | sort -k1nr | head -n 10 | cut -d " " -f 2-4 > .status/lastupdate.txt`
`cd #{REPOROOT}/; find . -name '*.log' -type f -printf "%T@ %TF %TT %p\n" | sort -k1nr | head -n 50 | cut -d " " -f 2-4 > .status/latestlogs.txt`
